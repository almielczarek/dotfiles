* UI
#+BEGIN_SRC emacs-lisp
(setq doom-font (font-spec :family "Source Code Pro" :size 14))
(setq doom-theme 'doom-nord)
(setq doom-nord-brighter-modeline t)
(setq display-line-numbers-type t)

(set-frame-parameter (selected-frame) 'alpha '(90 90))
(add-to-list 'default-frame-alist '(alpha 90 90))

(require 'spaceline-config)
(setq powerline-default-separator 'slant)
(spaceline-spacemacs-theme)
(spaceline-toggle-minor-modes-off)
(setq spaceline-highlight-face-func 'spaceline-highlight-face-evil-state)
(fringe-mode '2)

(remove-hook 'vterm-mode-hook 'hide-mode-line-mode)
(evil-set-initial-state 'vterm-mode 'emacs)

(setq which-key-idle-delay 0.3)

(setq display-time-day-and-date t)
(display-time)
#+END_SRC

* Org mode
#+BEGIN_SRC emacs-lisp
(setq org-directory "~/org/")

(map! :map org-mode-map :n "t" 'org-todo)
(map! :map org-agenda-mode-map "C-l" 'org-agenda-log-mode)

(after! org
  (add-to-list 'org-modules 'org-habit)
  (add-to-list 'org-modules 'org-drill)
  (setq org-agenda-files '("~/org/work.org" "~/org/personal.org"))
  (setq org-tags-column -80)
  (setq org-log-done 'time)
  (setq org-startup-folded t)
  (setq org-todo-keywords '((sequence "TODO(t)" "NEXT(n)" "FOLLOWUP(f)" "WAITING(w)" "INACTIVE(i)" "STARTED(s)" "DELEGATED(D@)" "REPEATING(r)" "|" "CANCELLED(c)" "DONE(d)")))
  (org-babel-do-load-languages 'org-babel-load-languages '((ledger . t)))
  (setq org-capture-templates
        '(("P" "Templates for projects")
          ("Pt" "Project-local todo" entry  ; {project-root}/todo.org
           (file+headline +org-capture-project-todo-file "Inbox")
           "* TODO %?\n%i\n%a" :prepend t)
          ("Pn" "Project-local notes" entry  ; {project-root}/notes.org
           (file+headline +org-capture-project-notes-file "Inbox")
           "* %U %?\n%i\n%a" :prepend t)
          ("Pc" "Project-local changelog" entry  ; {project-root}/changelog.org
           (file+headline +org-capture-project-changelog-file "Unreleased")
           "* %U %?\n%i\n%a" :prepend t)
          ("b" "Personal bookmark" entry (file "~/org/personal.org")
           "* TODO %?")
          ("t" "Work TODO" entry (file+headline "~/org/work.org" "Tasks")
           "* TODO %?")
          ("T" "Work TODO (clocked)" entry (file+headline "~/org/work.org" "Tasks")
           "* DONE %?" :clock-in t :clock-resume t)
          ("p" "Phone call" entry (file+headline "~/org/work.org" "Tasks")
           "* TODO %? :PHONE:" :clock-in t :clock-resume t))))
#+END_SRC

* Web mode
#+BEGIN_SRC emacs-lisp
(add-to-list 'auto-mode-alist '("\\.leex\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.vue\\'" . web-mode))

(defun web-hook ()
  (setq web-mode-markup-indent-offset 2)
  (setq web-mode-css-indent-offset 2)
  (setq web-mode-code-indent-offset 2))

(add-hook 'web-mode-hook 'web-hook)
#+END_SRC

* Elixir mode
#+BEGIN_SRC emacs-lisp
(add-hook 'elixir-mode-hook
          (lambda () (add-hook 'before-save-hook 'elixir-format nil t)))
#+END_SRC

* Global bindings
#+BEGIN_SRC emacs-lisp
(map!
 "C-c c" 'org-capture
 "s-C" 'kill-buffer-and-window
 "s-<return>" '+vterm/here
 "M-[" 'previous-buffer
 "M-]" 'next-buffer
 "s-<tab> TAB" #'+workspace/display
 "s-<tab> ." #'+workspace/switch-to
 "s-<tab> `" #'+workspace/other
 "s-<tab> n" #'+workspace/new
 "s-<tab> l" #'+workspace/load
 "s-<tab> s" #'+workspace/save
 "s-<tab> x" #'+workspace/kill-session
 "s-<tab> d" #'+workspace/delete
 "s-<tab> r" #'+workspace/rename
 "s-<tab> R" #'+workspace/restore-last-session
 "s-<tab> ]" #'+workspace/switch-right
 "s-<tab> [" #'+workspace/switch-left
 "s-<tab> 1" #'+workspace/switch-to-0
 "s-<tab> 2" #'+workspace/switch-to-1
 "s-<tab> 3" #'+workspace/switch-to-2
 "s-<tab> 4" #'+workspace/switch-to-3
 "s-<tab> 5" #'+workspace/switch-to-4
 "s-<tab> 6" #'+workspace/switch-to-5
 "s-<tab> 7" #'+workspace/switch-to-6
 "s-<tab> 8" #'+workspace/switch-to-7
 "s-<tab> 9" #'+workspace/switch-to-8
 "s-<tab> 0" #'+workspace/switch-to-final

 :leader
 "," '+ivy/switch-workspace-buffer
 "j" 'dad-joke
 "l" (lambda () (interactive) (start-process-shell-command "slock" nil "slock"))
 "oA" (lambda () (interactive (org-agenda nil "a")))
 "f$" (lambda () (interactive (async-shell-command "miniserve -u .")))
 "$" '+vterm/here
 "!" 'counsel-shell
 "pe" 'projectile-run-vterm
 "." (lambda () (interactive) (dired "."))
 "ot" '+vterm/here
 "oc" 'calendar
 "ob" (lambda () (interactive) (start-process-shell-command "qutebrowser" nil "qutebrowser"))
 "oi" (lambda () (interactive) (start-process-shell-command "inkscape" nil "inkscape"))
 "o~" (lambda () (interactive (dired "~")))
 "op" (lambda () (interactive (dired "~/projects")))
 "oD" (lambda () (interactive (dired "~/rockwood/development")))
 "od" (lambda () (interactive (dired "~/.dotfiles")))
 "ow" (lambda () (interactive) (find-file "~/org/work.org")))
#+END_SRC

* EXWM
#+BEGIN_SRC emacs-lisp
(require 'exwm)
(require 'exwm-config)
(exwm-config-default)

(add-hook 'exwm-mode-hook #'doom-mark-buffer-as-real-h)

(setq exwm-manage-configurations '(((string= exwm-instance-name "xfreerdp") char-mode t)))

(setq exwm-input-global-keys
      `(
        ([?\s-r] . exwm-input-toggle-keyboard)
        ([?\M-x] . counsel-M-x)
        ([?\s-p] . counsel-shell)
        ([?\s-h] . evil-window-left)
        ([?\s-k] . evil-window-up)
        ([?\s-j] . evil-window-down)
        ([?\s-l] . evil-window-right)
        ([?\M-\[] . previous-buffer)
        ([?\M-\]] . next-buffer)
        ([?\M-1] . +workspace/switch-to-0)
        ([?\M-2] . +workspace/switch-to-1)
        ([?\M-3] . +workspace/switch-to-2)
        ([?\M-4] . +workspace/switch-to-3)
        ([?\M-5] . +workspace/switch-to-4)
        ([?\M-6] . +workspace/switch-to-5)
        ([?\M-7] . +workspace/switch-to-6)
        ([?\M-8] . +workspace/switch-to-7)
        ([?\M-9] . +workspace/switch-to-8)))

(push ?\C-g exwm-input-prefix-keys)

(exwm-input-set-key (kbd "M-y") #'my/exwm-counsel-yank-pop)
(exwm-input-set-key (kbd "M-Y") '+pass/copy-secret)
(exwm-input-set-key (kbd "M-SPC") doom-leader-map)

(defun counsel-shell (command)
  (interactive
   (list
    (read-shell-command "$ ")))
  (start-process-shell-command command nil command))

(defun my/exwm-counsel-yank-pop ()
  "Same as `counsel-yank-pop' and paste into exwm buffer."
  (interactive)
  (let ((inhibit-read-only t)
        ;; Make sure we send selected yank-pop candidate to
        ;; clipboard:
        (yank-pop-change-selection t))
    (call-interactively #'counsel-yank-pop))
  (when (derived-mode-p 'exwm-mode)
    ;; https://github.com/ch11ng/exwm/issues/413#issuecomment-386858496
    (exwm-input--set-focus (exwm--buffer->id (window-buffer (selected-window))))
    (exwm-input--fake-key ?\C-v)))
#+END_SRC

* Misc
#+BEGIN_SRC emacs-lisp
(setq user-full-name "Alexander Mielczarek"
      user-mail-address "almielczarek@gmail.com")
(setq +workspaces-on-switch-project-behavior t)

(setq +workspaces-switch-project-function 'counsel-find-file)

(after! ibuffer
  (map! :map ibuffer-mode-map :n "r" #'ibuffer-update))

(global-auto-revert-mode)

(let ((device-specific-config "~/.doom.d/device.el"))
  (when (file-exists-p device-specific-config)
    (load-file device-specific-config)))
#+END_SRC
